import 'dart:convert';
import 'dart:io';

import 'package:cross_file/cross_file.dart';
import 'package:desktop_drop/desktop_drop.dart';
import 'package:dio/dio.dart';
import 'package:file_picker/file_picker.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:json_util_desktop/util/map_to_dart_util.dart';
import 'package:json_util_desktop/util/string_extension_json.dart';
import 'package:oktoast/oktoast.dart';

import '../util/comm.dart';
import '../util/json_util.dart';
import '../util/map_to_dart_textspan_util.dart';
import '../util/rich_textediting_controller.dart';
import 'dart_output_area.dart';
import 'json_input_area.dart';
import 'new_page.dart';

class MainPage extends StatefulWidget {
  const MainPage({Key? key}) : super(key: key);

  @override
  State<MainPage> createState() => _MainPageState();
}

class _MainPageState extends State<MainPage> {
  final TextEditingController _inputController = RichTextEditingController(false);
  final TextEditingController _outputController = RichTextEditingController(true);

  final ScrollController _scrollController = ScrollController();

  final ScrollController _scrollController1 = ScrollController();
  final ScrollController _scrollController2 = ScrollController();

  final TextEditingController _dartFileNameController = TextEditingController();

  TextSpan? outputDart;
  String? textRes;

  final List<XFile> _list = [];
  bool _dragging = false;

  bool needDecodeFunction = true;

  @override
  Widget build(BuildContext context) {
    return Expanded(
      child: DropTarget(
        onDragDone: (detail) {
          setState(() {
            _list.clear();
            // 只能接收一个文件的拖拽
            if (detail.files.length > 1) {
              showToast('只能同时解析一个文件');
            } else {
              _list.addAll(detail.files);
              readDraggedFile(_list[0]);
            }
          });
        },
        onDragEntered: (detail) {
          setState(() {
            _dragging = true;
          });
        },
        onDragExited: (detail) {
          setState(() {
            _dragging = false;
          });
        },
        child: Container(
          color: Colors.grey.shade200,
          padding: const EdgeInsets.all(10.5),
          child: Row(crossAxisAlignment: CrossAxisAlignment.start, children: [
            buildLeft(),
            buildMid(),
            buildRight(),
          ]),
        ),
      ),
    );
  }

  void showErrText(String err) {
    _outputController.text = err;
  }

  void formatAction() {
    setState(() {
      String verifyRes = _inputController.text.jsJSON;
      if (verifyRes.isNotEmpty) {
        _outputController.text = verifyRes;
      } else {
        // 输入框内格式化
        _inputController.text = convert(jsonDecode(_inputController.text), 0);
        // 输出框内格式化（带颜色）
        _outputController.text = _inputController.text;
      }
    });
  }

  void transJsonToDart() {
    setState(() {
      outputDart = null;
      // 输入框内格式化
      _inputController.text = convert(jsonDecode(_inputController.text), 0);

      Map? targetMap;
      try {
        dynamic obj = jsonDecode(_inputController.text);
        if (obj is Map) {
          targetMap = obj;
        } else {
          targetMap = null;
        }
      } catch (e) {
        targetMap = null;
      }

      if (targetMap == null) {
        outputDart = const TextSpan(text: 'ERROR:只能转换map', style: TextStyle(color: Colors.red));
        return;
      }

      try {
        TextSpan textSpanRes = MapToDartTextSpanUtil.trans(targetMap, className: getClzName, needDecodeFunction: needDecodeFunction);
        String text = MapToDartUtil.trans(targetMap, className: getClzName);
        _scrollController.jumpTo(0);
        outputDart = textSpanRes;
        textRes = text;
      } catch (e) {
        outputDart = TextSpan(text: '$e', style: const TextStyle(color: Colors.red));
      }
    });
  }

  String get getClzName {
    String clzName = _dartFileNameController.text;
    if (clzName.isEmpty) {
      clzName = 'Autogenerated';
    }
    return clzName;
  }

  Future<void> readDraggedFile(XFile file) async {
    String content = await file.readAsString();

    if (content.isEmpty) {
      showErrText('解析出的文件内容为空');
      return;
    }

    // 检查json格式，如果目标文件不是正确的json，就把错误展示出来
    String verifyRes = content.jsJSON;
    if (verifyRes.isNotEmpty) {
      _inputController.text = content;
      showErrText(verifyRes);
      return;
    }

    inputFileJson(content);
  }

  Future<void> chooseLocalFile() async {
    FilePickerResult? value = await FilePicker.platform.pickFiles();

    if (value == null || value.count == 0) {
      showErrText('选择文件发生错误');
      return;
    }

    String path = value.files.first.path ?? '';
    File f = File(path);

    if (!(await f.exists())) {
      showErrText('选择的文件不存在');
      return;
    }

    String content = await f.readAsString();

    if (content.isEmpty) {
      showErrText('解析出的文件内容为空');
      return;
    }

    // 检查json格式，如果目标文件不是正确的json，就把错误展示出来
    String verifyRes = content.jsJSON;
    if (verifyRes.isNotEmpty) {
      _inputController.text = content;
      showErrText(verifyRes);
      return;
    }

    inputFileJson(content);
  }

  void inputFileJson(String content) {
    _inputController.text = convert(jsonDecode(content), 0);
    _outputController.text = _inputController.text;
    _scrollController1.jumpTo(0);
    _scrollController2.jumpTo(0);
  }

  void readNetFile() async {
    TextEditingController controller = TextEditingController();

    String? netFile = await showDialog<String>(
        context: context,
        builder: (context) {
          return StatefulBuilder(builder: (BuildContext context, StateSetter setter) {
            return AlertDialog(
              title: const Text(
                '网络文件地址',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              titlePadding: const EdgeInsets.all(20),
              titleTextStyle: const TextStyle(color: Colors.black45, fontSize: 16),
              content: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  ConstrainedBox(
                    constraints: const BoxConstraints(maxWidth: 400, minWidth: 400),
                    child: TextField(
                      decoration: const InputDecoration(hintText: '输入网络文件地址'),
                      controller: controller,
                      onChanged: (v) {
                        setter(() {});
                      },
                    ),
                  ),
                  if (controller.text.isEmpty)
                    const Padding(
                        padding: EdgeInsets.only(top: 10),
                        child: Text(
                          '地址不能为空',
                          style: TextStyle(color: Colors.red),
                        ))
                ],
              ),
              contentPadding: const EdgeInsets.all(20),
              contentTextStyle: const TextStyle(color: Colors.black45, fontSize: 14),
              actions: <Widget>[
                TextButton(
                    onPressed: () {
                      Navigator.of(context).pop('');
                    },
                    child: const Text('关闭', style: TextStyle(fontWeight: FontWeight.bold))),
                TextButton(
                    onPressed: () {
                      if (controller.text.isNotEmpty) Navigator.of(context).pop(controller.text);
                    },
                    child: Text('确定', style: TextStyle(color: controller.text.isNotEmpty ? Colors.green : Colors.grey, fontWeight: FontWeight.bold))),
              ],
            );
          });
        });

    try {
      if (netFile == null || netFile.isEmpty) {
        return;
      }
      Response response = await Dio().get(netFile);
      inputFileJson(response.data);
    } catch (e) {
      showErrText('网络文件解析错误，文件地址可能存在错误 \n $netFile');
    }
  }

  void gotoNewPage() {
    Navigator.push(context, MaterialPageRoute(builder: (BuildContext context) {
      return const NewPage();
    }));
  }

  Widget buildLeft() {
    return Expanded(
      child: Column(crossAxisAlignment: CrossAxisAlignment.start, children: [
        Expanded(
            child: JsonInputAreaWidget(
          controller: _inputController,
          readOnly: false,
          lineCount: 999,
          actionWhenEditing: formatAction,
          borderColor: _dragging ? Colors.red : Colors.green,
          scrollController: _scrollController1,
          showClear: true,
        )),
        const SizedBox(height: 20),
        Expanded(
            child: JsonInputAreaWidget(
          controller: _outputController,
          readOnly: true,
          lineCount: 999,
          scrollController: _scrollController2,
        )),
      ]),
    );
  }

  Widget buildMid() {
    Widget transBtn = Container(
      width: midWidth,
      margin: commMargin,
      child: ElevatedButton(
          style: ButtonStyle(backgroundColor: MaterialStateProperty.resolveWith((states) {
            if (states.contains(MaterialState.pressed)) {
              return Colors.red.shade300;
            } else {
              return Colors.red;
            }
          })),
          onPressed: transJsonToDart,
          child: const Text('json转dart')),
    );

    Widget fileChooseBtn = Container(
        width: midWidth,
        margin: commMargin,
        child: ElevatedButton(
            style: ButtonStyle(backgroundColor: MaterialStateProperty.resolveWith((states) {
              if (states.contains(MaterialState.pressed)) {
                return Colors.blue.shade300;
              } else {
                return Colors.blue;
              }
            })),
            onPressed: chooseLocalFile,
            child: const Text('本地文件选择')));

    Widget netFileBtn = Container(
        width: midWidth,
        margin: commMargin,
        child: ElevatedButton(
            style: ButtonStyle(backgroundColor: MaterialStateProperty.resolveWith((states) {
              if (states.contains(MaterialState.pressed)) {
                return Colors.green.shade300;
              } else {
                return Colors.green;
              }
            })),
            onPressed: readNetFile,
            child: const Text('网络文件选择')));

    Widget gotoOtherPage = Container(
        width: midWidth,
        margin: commMargin,
        child: ElevatedButton(
            style: ButtonStyle(backgroundColor: MaterialStateProperty.resolveWith((states) {
              if (states.contains(MaterialState.pressed)) {
                return Colors.greenAccent.shade100;
              } else {
                return Colors.greenAccent;
              }
            })),
            onPressed: gotoNewPage,
            child: const Text('尝试多页面')));

    Widget switchWidget = Container(
        width: midWidth,
        margin: commMargin,
        child: Center(
          child: Row(
            children: [
              const Text(
                '生成decode函数',
                style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
              ),
              Switch(
                onChanged: (v) {
                  setState(() {
                    needDecodeFunction = v;
                  });
                },
                value: needDecodeFunction,
              )
            ],
          ),
        ));

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [fileChooseBtn, netFileBtn, transBtn, gotoOtherPage, switchWidget],
    );
  }

  Widget buildRight() {
    return Expanded(
        child: DartOutputAreaWidget(
            textSpan: outputDart ?? const TextSpan(),
            textContent: textRes ?? '',
            scrollController: _scrollController,
            clzName: getClzName,
            dartFileNameController: _dartFileNameController));
  }
}
